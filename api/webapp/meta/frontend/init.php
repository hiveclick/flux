<?php
/**
 * @todo We should auto-generate this file on all new paths
 */
try {
	// Setup our autoloader so we can find our classes
	spl_autoload_register(function($className) {
		$className = ltrim($className, '\\');
		$fileName  = '';
		$namespace = '';
		if ($lastNsPos = strripos($className, '\\')) {
			$namespace = substr($className, 0, $lastNsPos);
			$className = substr($className, $lastNsPos + 1);
			$fileName  = str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
		}
		$fileName .= str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php';
		require $fileName;
	});

	register_shutdown_function(function() {
		$error = error_get_last();

		if ($error !== null && ($error['type'] & (E_ERROR + E_PARSE + E_CORE_ERROR + E_COMPILE_ERROR + E_USER_ERROR + E_RECOVERABLE_ERROR))) {
			$error_html = '<!DOCTYPE html>';
			$error_html .= '<html>';
			$error_html .= '<head>';
			$error_html .= '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />';
			$error_html .= '<meta name="viewport" content="user-scalable=yes, width=device-width" />';
			$error_html .= '<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />';
			$error_html .= '<link rel="icon" type="image/png" href="favicon.png" />';
			$error_html .= '<link href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet" />';
			$error_html .= '<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>';
			$error_html .= '<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>';
			$error_html .= '<style type="text/css">';
			$error_html .= '	body {';
			$error_html .= '		padding:10px;';
			$error_html .= '	}';
			$error_html .= '</style>';
			$error_html .= '</head>';
			$error_html .= '<body>';
			$error_html .= '<div class="container">';
			$error_html .= '        <div class="well">';
			$error_html .= '        	<legend>Error Encountered!</legend>';
			$error_html .= '        	<div class="alert alert-danger">';
			$error = error_get_last();

			if ($error !== NULL) {
				$error_html .= $error["message"] . ' on line ' . $error["line"] . ' in file ' . $error["file"];
			} else {
				$error_html .= 'Unknown fatal error encountered in file ' . __FILE__;
			}
			$error_html .= '</div></div></div></body></html>';
			echo $error_html;
		}
	});

	$docroot_dir = isset($_SERVER['DOCUMENT_ROOT']) ? $_SERVER['DOCUMENT_ROOT'] : __DIR__;
	$root_dir = substr($docroot_dir, 0, strpos($docroot_dir, 'docroot') + strlen('docroot'));

	if (file_exists(realpath($docroot_dir) . '/.cache/config.php')) {
		require_once(realpath($docroot_dir) . '/.cache/config.php');
	} else {
		if (!file_exists(realpath($docroot_dir) . '/config.ini')) {
			throw new \Exception("Please configure your lib/config.ini file before installing the application");
		} else {
			$ini = parse_ini_file(realpath($docroot_dir) . '/config.ini');
			$buffer = array();
			$buffer[] = '<?php';
            $buffer[] = "// auth-generated by init";
            $buffer[] = "// date: " . date('m/d/Y H:i:s');
            // Set our define template
			$tmp    = "if (!defined('%s')) { define('%s', '%s'); }";
			$buffer[] = sprintf($tmp, 'ROOT_DIR', 'ROOT_DIR', realpath($root_dir));
			$buffer[] = sprintf($tmp, 'DOCROOT_DIR', 'DOCROOT_DIR', realpath($docroot_dir));
			if (!file_exists(realpath($docroot_dir) . '/.cache/')) {
				mkdir(realpath($docroot_dir) . '/.cache/');
			}
			$buffer[] = sprintf($tmp, 'FLOW_CACHE_DIR', 'FLOW_CACHE_DIR', realpath($docroot_dir) . '/.cache/');
			$buffer[] = sprintf($tmp, 'LIB_DIR', 'LIB_DIR', realpath(__DIR__));
			foreach ($ini as $key => $value) {
				$buffer[] = sprintf($tmp, strtoupper($key), strtoupper($key), $value);
			}
			if (!isset($ini['COOKIE_NAME'])) {
				$buffer[] = sprintf($tmp, 'COOKIE_NAME', 'COOKIE_NAME', 'fluxlocal');
			}
			if (!isset($ini['OFFER_KEY'])) {
				// if we don't have an offer key set, then use the folder name
				if (strpos($_SERVER['DOCUMENT_ROOT'], '/docroot') !== false) {
					$offer_key = substr($_SERVER['DOCUMENT_ROOT'],
						   strrpos($_SERVER['DOCUMENT_ROOT'], '/', strpos($_SERVER['DOCUMENT_ROOT'], '/docroot') - strlen($_SERVER['DOCUMENT_ROOT']) - 1) + 1,
						   strpos($_SERVER['DOCUMENT_ROOT'], '/docroot') - (strrpos($_SERVER['DOCUMENT_ROOT'], '/', strpos($_SERVER['DOCUMENT_ROOT'], '/docroot') - strlen($_SERVER['DOCUMENT_ROOT']) - 1) + 1)
					);
					$buffer[] = sprintf($tmp, 'OFFER_KEY', 'OFFER_KEY', $offer_key);
				} else {
					throw new \Exception('You must have your path within a docroot/ folder');
				}
			}
			$buffer[] = '?>';
			file_put_contents(realpath($docroot_dir) . '/.cache/config.php', implode("\n", $buffer));
			require_once(realpath($docroot_dir) . '/.cache/config.php');
		}
	}

	if (!defined('FE_LIB_DIR')) {
		throw new \Exception("Please configure your lib/config.ini with FE_LIB_DIR before running this path");
	}
	require_once(FE_LIB_DIR . '/../config.php');
	error_log("Requiring autoloader " . FE_LIB_DIR . '/vendor/autoload.php');
	require_once(FE_LIB_DIR . '/vendor/autoload.php');
	require_once(FE_LIB_DIR . '/vendor/hiveclick/mojavi/src/Mojavi/mojavi.php');
	@session_start();

	// initialize a dummy controller that we will use to access the context
	\Mojavi\Controller\Controller::newInstance('\Mojavi\Controller\BasicConsoleController');
	\Mojavi\Controller\Controller::getInstance()->loadContext();

	set_include_path(FE_LIB_DIR . DIRECTORY_SEPARATOR . ':' . get_include_path());

	ini_set('session.name', 'key');
} catch (Exception $e) {
	trigger_error($e->getMessage(), E_USER_ERROR);
}
